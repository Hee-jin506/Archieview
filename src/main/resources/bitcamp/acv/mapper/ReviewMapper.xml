<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="ReviewDao">
  
  <resultMap type="review" id="ReviewMap">
    <id column="rvno"           property="no"/>
    <result column="stcno"    property="stillCut"/>
    <result column="txt"      property="text"/>
    <result column="txt_x"      property="textX"/>
    <result column="txt_y"      property="textY"/>
    <result column="tfno"      property="textFont"/>
    <result column="txt_size"      property="textSize"/>
    <result column="rdt"      property="registeredDate"/>
    <result column="mdt"      property="modifiedDate"/>
    <result column="stat"      property="status"/>
    <result column="mvTitle"      property="movieTitle"/>
    
    <association property="writer" javaType="member">
      <id column="mno"          property="no"/>
      <result column="nick"    property="nickName"/>
    </association>
    
    <collection property="tags" ofType="tag">
      <id column="tno"          property="no"/>
      <result column="title"    property="title"/>
    </collection>
  </resultMap>
  
  
  <resultMap type="font" id="FontMap">
    <id column="tfno" property="no"/>
    <result column="name" property="name"/>
  </resultMap>
  
  
  <sql id="sql1">
    select 
    rv.rvno,
    rv.stcno,
    rv.mno,
    rv.txt,
    rv.txt_x,
    rv.txt_y,
    rv.tfno,
    rv.txt_size,
    rv.rdt,
    rv.mdt,
    rv.stat
    from 
      acv_rv rv
  </sql>
  
  <sql id="sql2">
    select 
      rv.rvno, 
      m.nick,
      rv.rdt,
      mv.mvno, 
      mv.title mvTitle,
      tp.tno,
      t.title,
      rv.txt,
      rv.stat
    from 
      acv_rv rv
      inner join acv_mbr m on rv.mno=m.mno
      inner join acv_stc s on rv.stcno=s.stcno
      inner join acv_mov mv on s.mvno=mv.mvno
      left outer join acv_tag_post tp on rv.rvno=tp.rvno
      left outer join acv_tag t on tp.tno=t.tno
  </sql>
       
       
   <!-- 삭제 = stat을 0으로 업데이트 -->
  <update id="delete" parameterType="int">
    update acv_rv
    set stat = 0
    where rvno = #{rvno}
  </update>
  
  <update id="active" parameterType="int">
    update acv_rv
    set stat = 1
    where rvno = #{rvno}
  </update>
   
  <select id="findByNo" resultMap="ReviewMap" parameterType="int">
    <include refid="sql2"/>
    where rv.rvno = #{rvno}
    order by rv.rvno desc
  </select>
  
  <select id="findAll" resultMap="ReviewMap" parameterType="string">
    <include refid="sql1"/>
    order by rv.rvno desc
  </select>
  
  
  <select id="findByDetailKeyword" resultMap="ReviewMap" parameterType="map">
    <include refid="sql2" />
    <where>
      <if test="number != null">
        and rv.rvno like concat('%', #{number}, '%') 
      </if>
      <if test="writerName != null">
        and m.nick like concat('%', #{writerName}, '%') 
      </if> 
      <if test="movieTitle != null">
        and mv.title like concat('%', #{movieTitle}, '%') 
      </if> 
      <if test="status != null">
        and rv.stat like concat('%', #{status}, '%') 
      </if>
      <if test="registeredDate != null">
        and rv.rdt like concat('%', #{registeredDate}, '%') 
      </if>
      <if test="startDate != null and endDate != null">
        and rv.rdt between date(#{startDate}) and date(#{endDate})+1 
      </if>
      <if test="startNumber != '' and endNumber != '' and startNumber != null and endNumber != null">
        and rv.rvno >= #{startNumber} and rv.rvno<![CDATA[<]]> #{endNumber}+1 
      </if>
      <if test="inactive == null and active != null">
        and rv.stat = 1
      </if>
      <if test="inactive != null and active == null">
        and rv.stat = 0
      </if>
    </where>
    order by rv.rvno desc
  </select>
  
  
  <select id="findAllByKeyword" resultMap="ReviewMap" parameterType="string">
    <include refid="sql2" />
    <if test="keyword != null">
      where
      rv.rvno like concat('%', #{keyword}, '%')
      or m.name like concat('%', #{keyword}, '%')
      or mv.title like concat('%', #{keyword}, '%')
    </if>
    order by rv.rvno desc
  </select>
  
  <!-- 태그명으로 리뷰를 찾는다 -->
  <select id="findByKeywordTagTitle" resultMap="ReviewMap" parameterType="string">
    <include refid="sql2" />
      where
      t.title = #{keyword}
    order by rv.rvno desc
  </select>
  
  
  <!-- 살기 싫어지네 -->
 <select id="findByKeyword" resultMap="ReviewMap" parameterType="map">
    <include refid="sql2" />
    <where>
      <if test="no == null and writer == null and movie==null">
        (rv.rvno like concat('%', #{keyword}, '%') or m.nick like concat('%', #{keyword}, '%') or mv.title like concat('%', #{keyword}, '%'))
      </if>
      <if test="no != null and writer != nul and movie!=nulll">
        (rv.rvno like concat('%', #{keyword}, '%') or m.nick like concat('%', #{keyword}, '%') or mv.title like concat('%', #{keyword}, '%'))
      </if>
      <if test="no == null and writer == null and movie!=null">
        (mv.title like concat('%', #{keyword}, '%'))
      </if>
      <if test="no == null and writer != null and movie==null">
        (m.nick like concat('%', #{keyword}, '%'))
      </if>
      <if test="no != null and writer == null and movie==null">
        (rv.rvno like concat('%', #{keyword}, '%'))
      </if>
      <if test="no != null and writer != null and movie==null">
        (rv.rvno like concat('%', #{keyword}, '%') or m.nick like concat('%', #{keyword}, '%'))
      </if>
      <if test="no != null and writer == null and movie!=null">
        (rv.rvno like concat('%', #{keyword}, '%') or mv.title like concat('%', #{keyword}, '%'))
      </if>
      <if test="no == null and writer != null and movie!=null">
        (m.nick like concat('%', #{keyword}, '%') or mv.title like concat('%', #{keyword}, '%'))
      </if>
     </where>
     order by rv.rvno desc
  </select>
  
  
  
  
  <select id="findFonts" resultMap="FontMap">
    select
      tfno,
      name
    from 
      acv_txt_font
    order by tfno asc
  </select>
  
  <insert id="insert" parameterType="review" useGeneratedKeys="true" keyProperty="no">
    insert into acv_rv(stcno, mno, txt, txt_x, txt_y, tfno, txt_size)
    values(#{stillCut}, #{writer.no}, #{text}, #{textX}, #{textY}, #{textFont}, #{textSize})
  </insert>
</mapper>






