<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="bitcamp.acv.dao.MemberDao">

 <resultMap type="member" id="MemberMap">
  <id column="mno" property="no" />
  <result column="auth" property="authority" />
  <result column="name" property="name" />
  <result column="ltno" property="loginNo" />
  <result column="email" property="email" />
  <result column="pw" property="password" />
  <result column="nick" property="nickName" />
  <result column="photo" property="photo" />
  <result column="intro" property="intro" />
  <result column="qno" property="questionsNo" />
  <result column="pw_hint_a" property="questionsAnswer" />
  <result column="rdt" property="registeredDate" />
  <result column="stno"      property="status"/>
  <result column="stat_title"      property="statusTitle"/>
  <result column="stat_mdt" property="statusModifiedDate" />
  
    <collection property="reviews"    ofType="review">
         <result column="rvno"        property="no"/>
         <result column="txt"        property="text"/>
         <result column="txt_x"      property="textX"/>
         <result column="txt_y"      property="textY"/>
         <result column="stc_url"        property="stcUrl"/>
         
	    <collection property="tags" ofType="tag">
	          <id column="tno"          property="no"/>
	      <result column="t_title"    property="title"/>
	      <result column="t_stat"         property="status"/>
	    </collection>
    </collection>
    
    <collection property="saved"    ofType="review">
         <result column="sv_rvno"        property="no"/>
         <result column="sv_txt"        property="text"/>
         <result column="sv_txt_x"      property="textX"/>
         <result column="sv_txt_y"      property="textY"/>
         <result column="stc2_stcUrl"        property="stcUrl"/>
         <result column="stat"        property="status"/>
         
      <collection property="tags" ofType="tag">
            <id column="sv_tno"          property="no"/>
        <result column="sv_t_title"    property="title"/>
        <result column="sv_t_stat"         property="status"/>
      </collection>
    </collection>
 </resultMap>

 <resultMap type="member" id="MemberMap2">
      <id column="mno" property="no" />
  <result column="auth" property="authority" />
  <result column="name" property="name" />
  <result column="ltno" property="loginNo" />
  <result column="email" property="email" />
  <result column="pw" property="password" />
  <result column="nick" property="nickName" />
  <result column="photo" property="photo" />
  <result column="intro" property="intro" />
  <result column="qno" property="questionsNo" />
  <result column="pw_hint_a" property="questionsAnswer" />
  <result column="rdt" property="registeredDate" />
  <result column="stno" property="status" />
  <result column="stat_mdt" property="statusModifiedDate" />
  <result column="flw_length" property="followers"/>
  <result column="lk_length"  property="likers"/>
  </resultMap>
   
  <sql id="sql1">
    select 
      mb.mno,
      mb.auth,
      mb.name,
      mb.ltno,
      mb.email,
      mb.pw,
      mb.nick,
      mb.photo,
      mb.intro,
      mb.qno,
      mb.pw_hint_a,               
      mb.rdt,
      mb.stno,
      mb.stat_mdt,
      mbs.title stat_title,
      mb.stat_mdt,
      rv.rvno,
      rv.txt,
      rv.txt_x,
      rv.txt_y,
      rv.rdt,
      t.tno,
      t.title t_title,
      stc.stc_url,
      sv.mno sv_mno,
      sv.rvno sv_rvno,
      rv2.rvno rv2_rvno,
      rv2.txt sv_txt,
      rv2.txt_x sv_txt_x,
      rv2.txt_y sv_txt_y,
      t2.tno sv_tno,
      t2.title sv_t_title,
      stc2.stcno stc2_stcno,
      stc2.stc_url stc2_stcUrl
    from 
      acv_mbr mb
      inner join acv_mbr_stat mbs on mb.stno = mbs.stno
      left outer join acv_rv rv on mb.mno = rv.mno
      left outer join acv_tag_post tp on tp.rvno=rv.rvno
      left outer join acv_tag t on tp.tno=t.tno
      left outer join acv_stc stc on rv.stcno = stc.stcno
      left outer join acv_save sv on mb.mno = sv.mno
      left outer join acv_rv rv2 on sv.rvno = rv2.rvno
      left outer join acv_tag_post tp2 on tp2.rvno=rv2.rvno
      left outer join acv_tag t2 on tp2.tno=t2.tno
      left outer join acv_stc stc2 on rv2.stcno = stc2.stcno
  </sql>

<!-- nickName에 keyword가 포함된 애들을 리턴 -->
 <select id="findByKeywordNickName" resultMap="MemberMap" parameterType="string">
  <include refid="sql1" />
   where
   mb.nick like concat('%', #{keyword}, '%')
  order by mb.mno desc
 </select>
 
 <select id="findAll" resultMap="MemberMap" parameterType="string">
  <include refid="sql1" />
  <if test="keyword != null">
   where
   mb.name like concat('%', #{keyword}, '%')
   or mb.nick like concat('%', #{keyword}, '%')
   or mb.email like concat('%', #{keyword}, '%')
   or mb.mno like concat('%', #{keyword}, '%')
   or mbs.title like concat('%', #{keyword}, '%')
  </if>
  order by mb.mno desc
 </select>
 
 <insert id="insert" parameterType="member">
  insert into
  acv_mbr(auth,name,ltno,email,pw,nick,photo,intro,qno,pw_hint_a,stno,stat_mdt)
  values(#{authority},#{name},#{loginNo},#{email},password(#{password}),#{nickName},#{photo},#{intro},#{questionsNo},#{questionsAnswer},#{status},#{statusModifiedDate})
 </insert>

 <select id="findByNo" parameterType="int" resultMap="MemberMap">
  select 
      mb.mno,
      mb.auth,
      mb.name,
      mb.ltno,
      mb.email,
      mb.pw,
      mb.nick,
      mb.photo,
      mb.intro,
      mb.qno,
      mb.pw_hint_a,               
      mb.rdt,
      mb.stno,
      mb.stat_mdt,
      mbs.title stat_title,
      mb.stat_mdt,
      rv.rvno,
      rv.txt,
      rv.txt_x,
      rv.txt_y,
      rv.rdt,
      t.tno,
      t.title t_title,
      stc.stc_url,
      sv.mno sv_mno,
      sv.rvno sv_rvno,
      rv2.rvno rv2_rvno,
      rv2.txt sv_txt,
      rv2.txt_x sv_txt_x,
      rv2.txt_y sv_txt_y,
      rv2.stat,
      t2.tno sv_tno,
      t2.title sv_t_title,
      stc2.stcno stc2_stcno,
      stc2.stc_url stc2_stcUrl
    from 
      acv_mbr mb
      inner join acv_mbr_stat mbs on mb.stno = mbs.stno
      left outer join 
        (select rvno, mno, txt, txt_x, txt_y, rdt, stcno from acv_rv where stat=1) rv
        on mb.mno = rv.mno
      left outer join acv_tag_post tp on tp.rvno=rv.rvno
      left outer join acv_tag t on tp.tno=t.tno
      left outer join acv_stc stc on rv.stcno = stc.stcno
      left outer join acv_save sv on mb.mno = sv.mno
      left outer join 
        (select rvno, mno, txt, txt_x, txt_y, rdt, stcno, stat from acv_rv) rv2
        on sv.rvno = rv2.rvno
      left outer join acv_tag_post tp2 on tp2.rvno=rv2.rvno
      left outer join acv_tag t2 on tp2.tno=t2.tno
      left outer join acv_stc stc2 on rv2.stcno = stc2.stcno
  where
  mb.mno = #{no}
  order by rv.rdt desc, sv.sdt desc
 </select>

 <select id="findByEmailPassword" parameterType="map"
  resultMap="MemberMap">
  <include refid="sql1" />
  where
  email = #{email}
  and pw = password(#{password})
 </select>
 
 <select id="findByEmail" parameterType="string"
  resultMap="MemberMap">
  <include refid="sql1" />
  where
  email = #{email}
 </select>

 <update id="update" parameterType="member">
  update acv_mbr
  <set>
   <if test="nickName != null">nick = #{nickName},</if>
   <if test="intro != null">intro = #{intro},</if>
   <if test="photo != null">photo = #{photo}</if>
  </set>
  where mno = #{no}
 </update>
 
 <update id='updateHint' parameterType='member'>
 update acv_mbr
 <set>
   <if test="questionsNo != null">qno = #{questionsNo}</if>,
   <if test="questionsAnswer != null">pw_hint_a = #{questionsAnswer}</if>
  </set>
  where mno = #{no}
 </update>

 <update id="updatePassword" parameterType="member">
  update acv_mbr
  <set>
   <if test="password != null">pw = password(#{password})</if>
  </set>
  where mno = #{no}
 </update>

 <!-- <delete id="delete" parameterType="int"> delete from acv_mbr where 
  mno=#{no} </delete> -->

 <update id="active" parameterType="int">
  update acv_mbr
  set
  stno = 1,
  stat_mdt = now()
  where mno=#{no}
 </update>

 <update id="inactive" parameterType="int">
  update acv_mbr
  set
  stno = 2,
  stat_mdt = now()
  where mno=#{no}
 </update>

 <update id="delete" parameterType="int">
  update acv_mbr
  set
  stno = 3,
  stat_mdt = now()
  where mno=#{no}
 </update>

 <select id="findByPop" parameterType="map" resultMap="MemberMap2">
  select
    mb.mno,
    mb.auth,
    mb.name,
    mb.ltno,
    mb.email,
    mb.pw,
    mb.nick,
    mb.photo,
    mb.intro,
    mb.qno,
    mb.pw_hint_a,
    mb.rdt,
    mb.stno,
    mb.stat_mdt,
    flw_length,
    lk_length
  from acv_mbr mb
    left outer join 
    (select target, fano, count(*) flw_length from acv_flw where fano=1 group by target, fano)fw
    on fw.target=mb.mno
    left outer join
    (select target, lano, count(*) lk_length, rv.mno from acv_like 
    inner join acv_rv rv on target=rvno 
    where lano=1 
    group by rv.mno)lk
    on lk.mno=mb.mno; 
 </select>
</mapper>




  